class ListComparator<T extends Comparable<T>> implements Comparator<List<T>> {
  @Override
  public int compare(List<T> o1, List<T> o2) {
    for (int i = 0; i < Math.min(o1.size(), o2.size()); i++) {
      int c = o1.get(i).compareTo(o2.get(i));
      if (c != 0) {
        return c;
      }
    }
    return Integer.compare(o1.size(), o2.size());
  }
}
class Solution{
    public static void helper(ArrayList<ArrayList<Integer>> allBoards, char board[][], int col){
        if(col==board.length){
            saveBoard(board,allBoards);
            return;
        }
        for(int row=0;row<board.length;row++){
            if(isSafe(board,row,col)){
                board[row][col]='Q';
                helper(allBoards,board,col+1);
                board[row][col]='.';
            }
        }
    }
    public static boolean isSafe(char board[][], int row, int col){
        // horizontal check
        for(int i=0;i<board.length;i++){
            if(board[row][i]=='Q')
                return false;
        }
        // vertical check
        for(int i=0;i<board[0].length;i++){
            if(board[i][col]=='Q')
                return false;
        }
        // upper left
        for(int i=row,j=col;i>=0 && j>=0;i--,j--){
            if(board[i][j]=='Q')
                return false;
        }
        // upper right
        for(int i=row,j=col;i>=0 && j<board.length;i--,j++){
            if(board[i][j]=='Q')
                return false;
        }
        // lower left
        for(int i=row,j=col;i<board.length && j>=0;i++,j--){
            if(board[i][j]=='Q')
                return false;
        }
        // lower right
        for(int i=row,j=col;i<board.length && j<board.length;i++,j++){
            if(board[i][j]=='Q')
                return false;
        }
        return true;
    }
    public static void saveBoard(char [][] board, ArrayList<ArrayList<Integer>> allBoards){
        ArrayList<Integer> newBoard=new ArrayList<>();
        for(int i=0;i<board.length;i++){
            int val=0;
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]=='Q')
                    val=j+1;
            }
            newBoard.add(val);
        }
        allBoards.add(newBoard);
    }
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        // code here
        ArrayList<ArrayList<Integer>> allBoards=new ArrayList<>();
        char board[][]=new char[n][n];
        helper(allBoards,board,0);
        Collections.sort(allBoards, new ListComparator<>());
        return allBoards;
    }
}
